ADITYA UNIVERSITY COMPITITIVE PROGRAMMING

DAY1 MONDAY 09-06-2025
SESSION1:
APP INSTALLATIONS:
Note: 
1. Prefer installing the installer files (.msi)
2. Once the installer file is downloaded, cut and paste it in the respective folder inside the software folder in C drive.
3. Then double click the installer and install the app/software

Create 2 folders named:
"software" in C drive
"learning" in D/E/C drive

Inside the software folder creates the folders named:
notepad_pp
vs_code
eclipse
git
jdk
intellij

1. Notepad++:	For making quick notes
G Search: Download notepad++
Link: https://notepad-plus-plus.org/downloads/v8.7.7/

2. vs code
G Search: Download vs code
Link: https://code.visualstudio.com/download

3. Eclipse
G Search: Download eclipse
From the link: https://www.eclipse.org/downloads/
Click on download packages
Link: https://www.eclipse.org/downloads/packages/
Download: Eclipse IDE for Enterprise Java and Web Developers (Select the OS)

4. git
G search: Download git
Link: https://git-scm.com/downloads
Click on the OS running on your system

5. JDK
G Search: Download JDK 17
Link: https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
Click on: Windows x64 Installer	153.92 MB

GITHUB:
1. Create Git Account and Login
2. Create a new Repo for our training
	Click on the + symbol on top, now click create new repo
	In the new page, enter the repo name
	Enter a suitable note/description for the repo
	Keep the Repo public
	Select the check box add readme file
	Now click on the create repository (green color) button
3. Create Personal Access Token (PAT)
	Click on profile icon (Top right corner)
	Click settings
	In new window scroll down and on left, click developer settings
	In new window, on top right, click personal access tokens, select Tokens classic
	In new window, click generate new token, select generate new token classic
	In window, add suitable note
	Click Expiration, selecty No expiry
	Under Scope, select only the 1st (top most) check box named "Repo"
	Now fully scroll down and click Generate PAT
	Now Copy the PAT (Click the copy button)
	Now mail the PAT to yourself (confidentiality) [Use the mail subject as "git pat"]
4. Configuration commands (To link our git account on the system we working)
	$ git config --global user.name "USERNAME"
	
	$ git config --global user.email "EMAIL"

TRAINER REPO LINK:
https://github.com/neelmyna/java_dsa

To Download/Clone/Copy the TRAINER REPO. Use the command:
$ git clone https://github.com/neelmyna/java_dsa

SESSION2:
To Copy A Repo into our system (Laptop):
$ git clone Repo_Link
$ git clone https://github.com/neelmyna/java_dsa

The above command copies the given Repo into out computer. The Copy of the Repo in the Server (github) can be called as Remote Repo and the copy of the Repo in our computer can be called as Local Repo.

Template:
$ git clone https://<PAT>@Repo_Link

Example:
$ git clone https://hefbkljwhfgklerhkjgvfhefkjvbdkfjb@github.com/neelmyna/java_dsa

The above command in which we have cloned a Repo using PAT is to do the Push commands without having to authenticate everytime.

To Push content into the Remote Repo (server). That is to copy the content from Local Repo (from computer) to Remote Repo, the commands are:

Steps and Commands:
1st ask the git to list down all the files that need to be pushed (uploaded)

$ git add path
$ git add C:/learning/java_dsa
$ git add .

2nd Step: Ask the git to create a secured object in which all the files to be pushed are copied.

$ git commit -m "java dsa notes added"

3rd Step: Push (upload) 
$ git push origin main
$ git push (Always pushes to main branch)

To check the status of the repo
$ git status
-----------------------------------------------

To create a new project in eclipse:

File-> New-> Project-> Java Project
De-select the module.java check box
Enter project name("pratice") and click Finish

now in the explorer, expand the project folder.
new Right clicksrc floder-> create -> new -> package
Give the package name day1

Right click "day1" in explorer (under src), create -> new -> class
Class name HelloWorld

Primitive Types in java:
Numeric:
	number only:
		byte
		short
		int
		long
	number with precision/accuracy:

-----------------------------
To create a new project in eclipse:

File -> New -> Project -> Java Project
In the Dialogue box (new window)
De-select the module.java check box
Enter project name ("practice") and Click Finish

Now in the explorer, expand the project folder
Now Right Click src folder -> create -> new -> package
Give the package name "day1"

Right Click "day1" in explorer (under src), create -> new -> class
Class name "HelloWorld"

primitive types in Java:
Numeric:
	number only
		byte
		short
		int 
		long
	number with precision/accuracy
		float
		double
char
boolean

ARITHMETIC OPERATORS:
+ - * / %

All the operators take 2 operands/input
Hence, all are binary operators
The expression is written using INFIX notation.
55 + 5
i/p are numbers
o/p is also a number
5 + 8 / 9
The division must be evaluated 1st. Boadmas rule
3 + 5 - 9
All Arithmetic operators have Left to Right Associtivity.
The Infix expression is what we users use. But it will be 1st converted to postfix expression and only then it is evaluated.

int num = 45;
00000000 00000000 00000000 00101101
00101101

int num = -45;

00101101
11010010
11010011
-1*2(7) + 1 * 2(6) + 1 * 2(4) + 3
-128 + 64 + 16 + 3
= -64 + 19
= -45

float num = 5.5;

sum = 55 + (-50) + 5.5
sum = 5 + 5.5
When the expression has operands of different types, then the lower sized DT value is converted to a value of higher sized DT, and only then the expression is solved. This is because the data must not be lost (decimal part of the number)
----------------------------------
DAY2 11-06-2025 WEDNESDAY
Java languages basics

Relational Operators:
> < >= <= != ==

I/P are numbers
O/P is boolean
All are binary operators
Used with Infix notation
Has lesser precedence than Arithmetic operators
Has higher precedence than logical operators

for i from 1 to n do:
for(int i = 1; i <= n; i++)
for(int i = 1; i < n+1; i++)

for(int i = 1; i <= 20; i++)
for(int i = 1; i < 21;  i++)

[10, 40]	closed interval 10 to 40
(20, 30)	open interval 21 to 29
[35, 65)	Right Open 35 to 64

i = 10;
j = 5;
i++;
j--;
a[i] = b[j]
b[j]--;

i = 10;
j = 5;
a[++i] = b[--j]--;
-------------------------------------
Logical Operators:
& && | || !

I/P are boolean
O/P is boolean
All are binary operators expect the not operator
Used with Infix notation
Has lesser precedence than Arithmetic operators and relational but has higher precedence than assignment operator.

The Post increment and Post decrement operators have lesser precedence than the assignment operator.

The dot operator
object.field
Paranthesis has the highest priority.
It is not an operators, but used to override the precedence of an operators.

JAVA PROGRAM STRUCTURE:

DISADVANTAGES OF C++:
main() must be a global function.
Global functions were allowed. Thus the solutions (apps.software) created with neither procedural nor OO.
global variables are still allowed in C++.
Files are loaded using macros and stored till end of the program
pointers were always a mess to many a programmers
The onus of creating and deleting objects in the Heap is on programmer.
The inheritance is by default private which makes the accessing the inherited properties very difficult.
Multiple inheritance creates a solution which is low cohesive.
The operator overloading concept can be used to just implement anything which is unnecessary
The compiler creates object file which is environment restricted/specific/dependent.
Handling  runtime errors is difficult.
Objects can be created in Stack area as well.
Array is primitive in C++

Java:
No global functions. All are only methods. So you have strict OO solution.
No global variables.
signed and unsigned removed. Thus the primitive DTs are simplified.
libraries can be loaded and used dynamically (No pre-processors)
Pointers are abstracted and users are given references.
All objects are created in Heap only
Array is an object in java
Creating object is the only job the programmer does. Object deletion is automated with the concept GRABAGE COLLECTOR.
The inheritance is always public in Java
There is no Multiple inheritance. All classes are always High cohesive. Thus the implementation is very easy.
The only operator that can be overloaded is + and only for string concatination.
The compiler creates bytecode which is environment(OS) independent.
Handling  runtime errors is easy via exception Handling.
The friend concept is removed. Thus no more ambiguous and complex classes.

>>>>>>> e2c19639252178c366f9f4bee860afc5815741c9
