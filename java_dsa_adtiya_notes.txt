ADITYA UNIVERSITY COMPITITIVE PROGRAMMING

DAY1 MONDAY 09-06-2025
SESSION1:
APP INSTALLATIONS:
Note: 
1. Prefer installing the installer files (.msi)
2. Once the installer file is downloaded, cut and paste it in the respective folder inside the software folder in C drive.
3. Then double click the installer and install the app/software

Create 2 folders named:
"software" in C drive
"learning" in D/E/C drive

Inside the software folder creates the folders named:
notepad_pp
vs_code
eclipse
git
jdk
intellij

1. Notepad++:	For making quick notes
G Search: Download notepad++
Link: https://notepad-plus-plus.org/downloads/v8.7.7/

2. vs code
G Search: Download vs code
Link: https://code.visualstudio.com/download

3. Eclipse
G Search: Download eclipse
From the link: https://www.eclipse.org/downloads/
Click on download packages
Link: https://www.eclipse.org/downloads/packages/
Download: Eclipse IDE for Enterprise Java and Web Developers (Select the OS)

4. git
G search: Download git
Link: https://git-scm.com/downloads
Click on the OS running on your system

5. JDK
G Search: Download JDK 17
Link: https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
Click on: Windows x64 Installer	153.92 MB

GITHUB:
1. Create Git Account and Login
2. Create a new Repo for our training
	Click on the + symbol on top, now click create new repo
	In the new page, enter the repo name
	Enter a suitable note/description for the repo
	Keep the Repo public
	Select the check box add readme file
	Now click on the create repository (green color) button
3. Create Personal Access Token (PAT)
	Click on profile icon (Top right corner)
	Click settings
	In new windown scroll down and on left, click developer settings
	In new window, on top right, click personal access tokens, select Tokens classic
	In new window, click generate new token, select generate new token classic
	In window, add suitable note
	Click Expiration, selecty No expiry
	Under Scope, select only the 1st (top most) check box named "Repo"
	Now fully scroll down and click Generate PAT
	Now Copy the PAT (Click the copy button)
	Now mail the PAT to yourself (confidentiality) [Use the mail subject as "git pat"]
4. Configuration commands (To link our git account on the system we working)
	$ git config --global user.name "USERNAME"
	
	$ git config --global user.email "EMAIL"

TRAINER REPO LINK:
https://github.com/neelmyna/java_dsa

To Download/Clone/Copy the TRAINER REPO. Use the command:
$ git clone https://github.com/neelmyna/java_dsa

SESSION2:
To Copy A Repo into our system (Laptop):
$ git clone Repo_Link
$ git clone https://github.com/neelmyna/java_dsa

The above command copies the given Repo into out computer. The Copy of the Repo in the Server (github) can be called as Remote Repo and the copy of the Repo in our computer can be called as Local Repo.

Template:
$ git clone https://<PAT>@Repo_Link

Example:
$ git clone https://hefbkljwhfgklerhkjgvfhefkjvbdkfjb@github.com/neelmyna/java_dsa

The above command in which we have cloned a Repo using PAT is to do the Push commands without having to authenticate everytime.

To Push content into the Remote Repo (server). That is to copy the content from Local Repo (from computer) to Remote Repo, the commands are:

Steps and Commands:
1st ask the git to list down all the files that need to be pushed (uploaded)

$ git add path
$ git add C:/learning/java_dsa
$ git add .

2nd Step: Ask the git to create a secured object in which all the files to be pushed are copied.

$ git commit -m "java dsa notes added"

3rd Step: Push (upload) 
$ git push origin main
$ git push (Always pushes to main branch)

To check the status of the repo
$ git status
-----------------------------
To create a new project in eclipse:

File -> New -> Project -> Java Project
In the Dialogue box (new window)
De-select the module.java check box
Enter project name ("practice") and Click Finish

Now in the explorer, expand the project folder
Now Right Click src folder -> create -> new -> package
Give the package name "day1"

Right Click "day1" in explorer (under src), create -> new -> class
Class name "HelloWorld"

primitive types in Java:
Numeric:
	number only
		byte
		short
		int 
		long
	number with precision/accuracy
		float
		double
char
boolean

ARITHMETIC OPERATORS:
+ - * / %


